heat_template_version: 2015-04-30

parameters:
  cbam:
    type: json

resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
          remote_ip_prefix: 0.0.0.0/0

  port:
    type: OS::Neutron::Port
    depends_on: security_group
    properties:
      network: { get_param: [ cbam, virtualLinks, internal_vl, networkId ] }
      security_groups:
        - { get_resource: security_group }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: [ cbam, externalConnectionPoints, universal_ecp, networkId ] }
      port_id: { get_resource: port }

  boot_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
#      config: |
#        #!/bin/bash
#        echo "Running boot script"
#        touch /home/centos/testfile
      config: 
        str_replace:
          template: {get_file: server_boot.sh}
          params:
            $NAME: 'viyou'
            wc_notify: { get_attr: [wait_handle, curl_cli] }
  
  boot_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /home/centos/created_by_boot_config
          content: 'created_by_boot_config'

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: boot_config}
      - config: {get_resource: boot_script}

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      count: 1
      timeout: 300

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  server:
    type: OS::Nova::Server
    properties:
      key_name: eecloud55
      image: { get_param: [ cbam, resources, server, imageId ] }
      flavor: { get_param: [ cbam, resources, server, flavorId ] }
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: server_init}
      networks:
        - port: { get_resource: port }

outputs:
  public_ip:
    value: { get_attr: [floating_ip, floating_ip_address] }
  wc_data:
    value: { get_attr: [wait_condition, data] }
